package model_helpers;

import java.util.ArrayList;
import java.util.List;
import model_db.ProviderClient;
import model_db.StatusInfo;
import model_db.Trader;
import model_db.TransactionSolde;
import model_util.HibernateUtil;
import model_util.hqlQueriesHelper;
import org.hibernate.Hibernate;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 * TransactionSolde generated by hbm2java
 */
public class TransactionSolde_Util {

    public List getAllTransactionSolde(Session session, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionSolde where flag=0", suffix);

    }

    public Integer getAllTransactionSolde() {
        Session session = HibernateUtil.getSessionFactory().openSession();
          List list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionSolde where flag=0", "");
 if (list.isEmpty()) {
            return 0;
        } else {
        return list.size();
            }

    }
   public Integer getAllTransactionSoldeParOperateur(String op) {
        Session session = HibernateUtil.getSessionFactory().openSession();
          List list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionSolde where flag=0 and op", "");
 if (list.isEmpty()) {
            return 0;
        } else {
        return list.size();
            }

    }
    public List getAllTransactionSolde(String suffix) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionSolde where  flag=0", suffix);

    }

    public TransactionSolde getTransactionSolde_by_id(Session session, int id, String suffix) {
        List list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionSolde where flag=0 and idtransactsolde = " + id, suffix);
        if (list.isEmpty()) {
            return null;
        } else {
            return ((TransactionSolde) list.get(0));
        }
    }

    public List getTransactionSolde_by_providerClient(Session session, ProviderClient providerClient, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionSolde where flag=0 "
                + "and providerClient = " + providerClient.getIdproviderClient(), suffix);

    }

    public List getTransactionSolde_by_statusInfo(Session session, StatusInfo statusInfo, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionSolde where flag=0 "
                + "and statusInfo = " + statusInfo.getIdstatusInfo(), suffix);

    }

    public List getTransactionSolde_by_transactAmount(Session session, double transactAmountmin, double transactAmountmax, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionSolde where flag=0 "
                + "and (transactAmount >= " + transactAmountmin + " and transactAmount <= " + transactAmountmax + ")",
                suffix);
    }

    public List getTransactionSolde_by_providerClient_statusInfo(Session session, ProviderClient providerClient, StatusInfo statusInfo, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionSolde where flag=0 "
                + "and providerClient = " + providerClient.getIdproviderClient()
                + " and statusInfo = " + statusInfo.getIdstatusInfo(),
                suffix);

    }

    public List getTransactionSolde_by_providerClient_transactAmount(Session session, ProviderClient providerClient, double transactAmountmin, double transactAmountmax, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionSolde where flag=0 "
                + "and providerClient = " + providerClient.getIdproviderClient()
                + "and (transactAmount >= " + transactAmountmin + " and transactAmount <= " + transactAmountmax + ")",
                suffix);
    }

    public List getTransactionSolde_by_provide(Session session, Trader provider, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionSolde where flag=0 "
                + "and providerClient.traderByIdprovider = " + provider.getIdtrader(), suffix);

    }

    public List getTransactionSolde_by_provider_statusInfo(Session session, Trader provider, StatusInfo statusInfo, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionSolde where flag=0 "
                + "and providerClient.traderByIdprovider = " + provider.getIdtrader()
                + " and statusInfo = " + statusInfo.getIdstatusInfo(),
                suffix);

    }

    public List getTransactionSolde_by_provider_transactAmount(Session session, Trader provider, double transactAmountmin, double transactAmountmax, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionSolde where flag=0 "
                + "and providerClient.traderByIdprovider = " + provider.getIdtrader()
                + "and (transactAmount >= " + transactAmountmin + " and transactAmount <= " + transactAmountmax + ")",
                suffix);
    }

    public void addTransactionSolde(TransactionSolde adt, Session session) {
        hqlQueriesHelper.executeAddHQLQuery_WithPreparedSession(adt, session);
    }

    public void updateTransactionSolde(TransactionSolde adt, Session session) {
        hqlQueriesHelper.executeUpdateHQLQuery_WithPreparedSession(adt, session);
    }

    
    public List getAllTransactionSold(Integer start, Integer length,String Status,String provider , String name ,String dateDebut,String dateFin) {
     String dateWhere = "";
        if(dateDebut!=""){
            dateWhere ="and transactDate BETWEEN  ' "+dateDebut +" 00:00:00.0'";
        }
         if(dateFin!=""){
         dateWhere +=" and '"+dateFin+" 00:00:00.0'";
        }
         System.out.println("model_helpers.TransactionTopup_Util.getAllTransactionTopup()===>>"+dateWhere);
        Session session = HibernateUtil.getSessionFactory().openSession();
        List resultList = new ArrayList();
        try {
            Query q = session.createQuery("FROM TransactionSolde where providerClient.traderByIdclient.traderFname like '%"+name+"%' and statusInfo.statusInfoDesc like '%"+Status+"%' and providerClient.traderByIdprovider.traderFname like '%"+provider+"%' "
                    +dateWhere
                    + " and flag=0" ).setFirstResult(start).setMaxResults(length);
            resultList = q.list();
        } catch (HibernateException he) {
            he.printStackTrace();
        }
        return resultList;
    }
}
