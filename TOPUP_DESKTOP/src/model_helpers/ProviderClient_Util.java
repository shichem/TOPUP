package model_helpers;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.stream.Collectors;
import model_db.Operator;
import model_db.ProviderClient;
import model_db.Trader;
import model_db.UserInfo;
import model_util.HibernateUtil;
import model_util.hqlQueriesHelper;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 * ProviderClient generated by hbm2java
 */
public class ProviderClient_Util {

    public List getAllProviderClient(Session session, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0", suffix);

    }

    public ProviderClient getProviderClientForTrader(Integer traderId, String suffix) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        List list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0 and idclient=" + traderId, suffix);
        if (list.isEmpty()) {
            return null;
        } else {
            return (ProviderClient) list.get(0);
        }

    }

    public List<ProviderClient> getAllTrader_ForProvider(int userID, String suffix) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        UserInfo user = new UserInfo_Util().getUserInfo_by_id(session, userID, "");
        System.out.println("model_helpers.ProviderClient_Util.getAllTrader_ForProvider()  id " + user.getTrader().getIdtrader());
        List<ProviderClient> resultList = new ArrayList<ProviderClient>();
        try {
            Query q = session.createQuery("FROM ProviderClient  where flag=0 and idprovider = " + user.getTrader().getIdtrader());
            resultList = q.list();//q.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list();

        } catch (HibernateException he) {
            he.printStackTrace();
        }
        System.out.println("model_helpers.ProviderClient_Util.getAllTrader_ForProvider()size+++" + resultList.size());
        List<ProviderClient> collect = resultList.stream()
                .filter(distinctByKey(p -> p.getTraderByIdclient().getIdtrader()))
                .collect(Collectors.toList());
        return collect;

    } 
    
      public List<ProviderClient> getAllTrader_ForProvider( ) {
        Session session = HibernateUtil.getSessionFactory().openSession();
       // UserInfo user = new UserInfo_Util().getUserInfo_by_id(session, userID, "");
        List<ProviderClient> resultList = new ArrayList<ProviderClient>();
        try {
            Query q = session.createQuery("FROM ProviderClient  where flag=0 ");
            resultList = q.list();//q.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list();

        } catch (HibernateException he) {
            he.printStackTrace();
        }
        
        return resultList;

    } 
     public List<ProviderClient> getAllTrader_ForProvider(int providerId) {
        Session session = HibernateUtil.getSessionFactory().openSession();        
        List<ProviderClient> resultList = new ArrayList<ProviderClient>();
        try {
            Query q = session.createQuery("FROM ProviderClient  where flag=0 and idprovider = " + providerId);
            resultList = q.list();//q.setResultTransformer(Criteria.DISTINCT_ROOT_ENTITY).list();

        } catch (HibernateException he) {
            he.printStackTrace();
        }
        System.out.println("model_helpers.ProviderClient_Util.getAllTrader_ForProvider()size+++" + resultList.size());
        List<ProviderClient> collect = resultList.stream()
                .filter(distinctByKey(p -> p.getTraderByIdclient().getIdtrader()))
                .collect(Collectors.toList());
        return collect;

    } 

    public static <T> Predicate<T> distinctByKey(Function<? super T, Object> keyExtractor) 
    {
        Map<Object, Boolean> map = new ConcurrentHashMap<>();
        return t -> map.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
    }

    public ProviderClient getProviderClient_by_id(Session session, int id, String suffix) {
        List list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0 and idproviderClient = " + id, suffix);
        if (list.isEmpty()) {
            return null;
        } else {
            return ((ProviderClient) list.get(0));
        }

    }

    public ProviderClient getProviderClient_by_id(int id, String suffix) {
        Session session = HibernateUtil.getSessionFactory().openSession();

        List list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0 and idproviderClient = " + id, suffix);
        if (list.isEmpty()) {
            return null;
        } else {
            return ((ProviderClient) list.get(0));
        }

    }

    public List getProviderClient_by_operator(Session session, Operator operator, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0 and operator = " + operator.getIdoperator(), suffix);

    }

    public List getProviderClient_by_provider(Session session, Trader provider, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0 and traderByIdprovider = " + provider.getIdtrader(), suffix);

    }

    public List getProviderClient_by_client(Session session, Trader client, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0 and traderByIdclient = " + client.getIdtrader(), suffix);

    }

    public List getProviderClient_by_client(Trader client, String suffix) {
        Session session = HibernateUtil.getSessionFactory().openSession();

        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0 and traderByIdclient = " + client.getIdtrader(), suffix);

    }

    public List getProviderClient_by_client(int clientId, String suffix) {
        Session session = HibernateUtil.getSessionFactory().openSession();

        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0 and traderByIdclient = " + clientId, suffix);

    }

    public List getProviderClient_by_provider_operator(Session session, Trader provider, Operator operator, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0"
                + " and traderByIdprovider = " + provider.getIdtrader()
                + " and operator = " + operator.getIdoperator(),
                suffix);
    }

    public List getProviderClient_by_operatror_client(Session session, Trader client, Operator operator, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0"
                + " and traderByIdclient = " + client.getIdtrader()
                + " and operator = " + operator.getIdoperator(),
                suffix);
    }

    public ProviderClient getProviderClient_by_provider_client_operator(Session session, Trader provider, Trader client, Operator operator, String suffix) {
        List list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0"
                + " and traderByIdprovider = " + provider.getIdtrader()
                + " and traderByIdclient = " + client.getIdtrader()
                + " and operator = " + operator.getIdoperator(),
                suffix);
        if (list.isEmpty()) {
            return null;
        } else {
            return ((ProviderClient) list.get(0));
        }
    }

    public ProviderClient getActiveProviderClient_by_provider_client_operator(Session session, Trader provider, Trader client, Operator operator, String suffix) {
        List list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0"
                + " and traderByIdprovider = " + provider.getIdtrader()
                + " and traderByIdclient = " + client.getIdtrader()
                + " and operator = " + operator.getIdoperator()
                + " and deactivationAffect <> NULL",
                suffix);
        if (list.isEmpty()) {
            return null;
        } else {
            return ((ProviderClient) list.get(0));
        }
    }

    public ProviderClient getActiveProviderClient_by_provider_client_operator1(Session session, Trader provider, Trader client, Operator operator, String suffix) {
        List list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0"
                + " and traderByIdprovider = " + provider.getIdtrader()
                + " and traderByIdclient = " + client.getIdtrader()
                + " and operator = " + operator.getIdoperator(),
                suffix);
        if (list.isEmpty()) {
            return null;
        } else {
            return ((ProviderClient) list.get(0));
        }
    }

    public List getProviderClient_by_provider_client(Session session, Trader provider, Trader client, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0"
                + " and traderByIdprovider = " + provider.getIdtrader()
                + " and traderByIdclient = " + client.getIdtrader(),
                suffix);
    }

    public List getProviderClient_by_solde(Session session, double soldemin, double soldemax, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0 "
                + "and (solde >= " + soldemin + " and solde <= " + soldemax + ")",
                suffix);
    }

    public List getProviderClient_by_provider_solde(Session session, Trader provider, double soldemin, double soldemax, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0"
                + " and traderByIdprovider = " + provider.getIdtrader()
                + " and (solde >= " + soldemin + " and solde <= " + soldemax + ")",
                suffix);
    }

    public List getProviderClient_by_provider_operator_solde(Session session, Trader provider, Operator operator, double soldemin, double soldemax, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0"
                + " and traderByIdprovider = " + provider.getIdtrader()
                + " and operator = " + operator.getIdoperator()
                + " and (solde >= " + soldemin + " and solde <= " + soldemax + ")",
                suffix);
    }

    public List getProviderClient_by_provider_client_solde(Session session, Trader provider, Trader client, double soldemin, double soldemax, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0"
                + " and traderByIdprovider = " + provider.getIdtrader()
                + " and traderByIdclient = " + client.getIdtrader()
                + " and (solde >= " + soldemin + " and solde <= " + soldemax + ")",
                suffix);
    }

    public List getProviderClient_by_limitTransact(Session session, double limitTransactmin, double limitTransactmax, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0 "
                + "and (limitTransact >= " + limitTransactmin + " and limitTransact <= " + limitTransactmax + ")",
                suffix);
    }

    public List getProviderClient_by_provider_limitTransact(Session session, Trader provider, double limitTransactmin, double limitTransactmax, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0"
                + " and traderByIdprovider = " + provider.getIdtrader()
                + " and (limitTransact >= " + limitTransactmin + " and limitTransact <= " + limitTransactmax + ")",
                suffix);
    }

    public List getProviderClient_by_provider_operator_limitTransact(Session session, Trader provider, Operator operator, double limitTransactmin, double limitTransactmax, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0"
                + " and traderByIdprovider = " + provider.getIdtrader()
                + " and operator = " + operator.getIdoperator()
                + " and (limitTransact >= " + limitTransactmin + " and limitTransact <= " + limitTransactmax + ")",
                suffix);
    }

    public List getProviderClient_by_provider_client_limitTransact(Session session, Trader provider, Trader client, double limitTransactmin, double limitTransactmax, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM ProviderClient where flag=0"
                + " and traderByIdprovider = " + provider.getIdtrader()
                + " and traderByIdclient = " + client.getIdtrader()
                + " and (limitTransact >= " + limitTransactmin + " and limitTransact <= " + limitTransactmax + ")",
                suffix);
    }

    public void addProviderClient(ProviderClient adt, Session session) {
        hqlQueriesHelper.executeAddHQLQuery_WithPreparedSession(adt, session);
    }

    public void updateProviderClient(ProviderClient adt, Session session) {
        hqlQueriesHelper.executeUpdateHQLQuery_WithPreparedSession(adt, session);
    }

}
