package model_helpers;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.persistence.Tuple;
import model_db.SimOffer;
import model_db.StatusInfo;
import model_db.TransactionTopup;
import model_util.HibernateUtil;
import model_util.hqlQueriesHelper;
import org.hibernate.HibernateException;
import org.hibernate.Query;
import org.hibernate.Session;

/**
 * TransactionTopup generated by hbm2java
 */
public class TransactionTopup_Util {

    public List getAllTransactionTopup(Session session, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionTopup where flag=0", suffix);

    }

    public List getAllTransactionTopup(Integer start, Integer length, String Status, String type, String name, String dateDebut, String dateFin, String timeDebut, String timeFin, String simType, String operator, String offer, String sim, String minSold, String maxSold) {
        String dateWhere = "";
        String interavaleSold = "";

        String timed = " 00:00:00'";
        if (timeDebut != "") {
            timed = " "+timeDebut+"'";
        }
        String timef = " 23:59:00'";
        if (timeFin != "") {
            timef = " "+timeFin+"'";
        }
        if (dateDebut != "") {
            dateWhere = "and transact_date >=  '" + dateDebut + timed;
        }
        if (dateFin != "") {
            dateWhere += " and transact_date <= '" + dateFin + timef;
        }
        if (minSold != "") {
            interavaleSold += " and transactAmount >=" + minSold;
        }
        if (maxSold != "") {
            interavaleSold += " and transactAmount <=" + maxSold;
        }
        System.out.println("model_helpers.TransactionTopup_Util.getAllTransactionTopup()===>>" + dateWhere);
        Session session = HibernateUtil.getSessionFactory().openSession();
        List resultList = new ArrayList();
        try {
            Query q = session.createQuery("FROM TransactionTopup where  providerClient.traderByIdclient.traderFname like '%" + name + "%' and statusInfo.statusInfoDesc like '%" + Status + "%' and transactionType.transactionTypeDesc like '%" + type + "%' "
                    + dateWhere + " " + interavaleSold
                    + " and flag=0  and simOffer.simInfo.simnumber like'%" + sim + "%' and simOffer.simInfo.simType.simTypeDesc like'%" + simType + "%'  and simOffer.simInfo.operator.operatorDesc like'%" + operator + "%'  and simOffer.offerInfo.offerDesc like'%" + offer + "%'  order by idtransacttopup").setFirstResult(start).setMaxResults(length);
            resultList = q.list();
        } catch (HibernateException he) {
            he.printStackTrace();
        }
        return resultList;
    }

    public double SumSold(String Status, String type, String name, String dateDebut, String dateFin, String timeDebut, String timeFin, String simType, String operator, String offer, String sim, String minSold, String maxSold) {
        String dateWhere = "";
        String interavaleSold = "";
        String timed = " 00:00:00'";
        if (timeDebut != "") {
            timed = " "+timeDebut+"'";;
        }
        String timef = " 23:59:00'";
        if (timeFin != "") {
            timef = " "+timeFin+"'";;
        }
        if (dateDebut != "") {
            dateWhere = "and transact_date >=  '" + dateDebut + timed;
        }
        if (dateFin != "") {
            dateWhere += " and transact_date <= '" + dateFin + timef;
        }
        if (minSold != "") {
            interavaleSold += " and transactAmount >=" + minSold;
        }
        if (maxSold != "") {
            interavaleSold += " and transactAmount <=" + maxSold;
        }
        Session session = HibernateUtil.getSessionFactory().openSession();
        List resultList = new ArrayList();
        try {
            Query q = session.createQuery("SELECT  SUM(transactAmount) FROM TransactionTopup where  providerClient.traderByIdclient.traderFname like '%" + name + "%' and statusInfo.statusInfoDesc like '%" + Status + "%' and transactionType.transactionTypeDesc like '%" + type + "%' "
                    + dateWhere + " " + interavaleSold
                    + " and flag=0 and simOffer.simInfo.simnumber like'%" + sim + "%' and simOffer.simInfo.simType.simTypeDesc like'%" + simType + "%' and simOffer.simInfo.operator.operatorDesc like'%" + operator + "%'  and simOffer.offerInfo.offerDesc like'%" + offer + "%' ");
            resultList = q.list();
        } catch (HibernateException he) {
            he.printStackTrace();
        }
        if (resultList.isEmpty()) {
            return 0;
        }
        if (resultList.get(0) == null) {
            return 0;
        } else {
            return (double) resultList.get(0);
        }
    }

    public Integer getAllTransactionTopup() {
        Session session = HibernateUtil.getSessionFactory().openSession();

        List list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionTopup where flag=0", "");

        if (list.isEmpty()) {
            return 0;
        } else {
            return list.size();
        }

    }

    public List getAllTransactionTopupGroupTransactionSim() {
        Session session = HibernateUtil.getSessionFactory().openSession();

        List list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "SELECT Count(*)    FROM TransactionTopup where flag=0 group by simOffer.simInfo.simnumber", "");
        if (list.isEmpty()) {
            System.out.println("model_helpers.TransactionTopup_Util.getAllTransactionTopupGroupTransactionSim() empty");

            return null;
        } else {
            System.out.println("model_helpers.TransactionTopup_Util.getAllTransactionTopupGroupTransactionSim()" + list.size());
            return list;
        }
    }

    public List getAllTransactionTopupGroupTransactionSim1() {
        Session session = HibernateUtil.getSessionFactory().openSession();

        List list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "SELECT simOffer.simInfo.simnumber  FROM TransactionTopup where flag=0 group by simOffer.simInfo.simnumber", "");
        if (list.isEmpty()) {
            System.out.println("model_helpers.TransactionTopup_Util.getAllTransactionTopupGroupTransactionSim() empty");

            return null;
        } else {
            System.out.println("model_helpers.TransactionTopup_Util.getAllTransactionTopupGroupTransactionSim()" + list.size());
            return list;
        }

    }

    public List getAllTransactionTopupGroupByOffer() {
        Session session = HibernateUtil.getSessionFactory().openSession();

        List list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "SELECT Count(*)    FROM TransactionTopup where flag=0 group by simOffer.offerInfo.offerDesc", "");
        if (list.isEmpty()) {
            System.out.println("model_helpers.TransactionTopup_Util.getAllTransactionTopupGroupTransactionSim() empty");

            return null;
        } else {
            System.out.println("model_helpers.TransactionTopup_Util.getAllTransactionTopupGroupTransactionSim()" + list.size());
            return list;
        }
    }

    public List getAllTransactionTopupGroupByOffer1() {
        Session session = HibernateUtil.getSessionFactory().openSession();

        List list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "SELECT simOffer.offerInfo.offerDesc  FROM TransactionTopup where flag=0 group by simOffer.offerInfo.offerDesc", "");
        if (list.isEmpty()) {
            System.out.println("model_helpers.TransactionTopup_Util.getAllTransactionTopupGroupTransactionSim() empty");

            return null;
        } else {
            System.out.println("model_helpers.TransactionTopup_Util.getAllTransactionTopupGroupTransactionSim()" + list.size());
            return list;
        }

    }

    public Integer getAllTransactionTopupByOperator(String op) {
        Session session = HibernateUtil.getSessionFactory().openSession();

        List list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionTopup where flag=0 and simOffer.simInfo.operator.operatorDesc ='" + op + "'", "");

        if (list.isEmpty()) {
            return 0;
        } else {
            return list.size();
        }

    }

    public TransactionTopup getTransactionTopup_by_id(Session session, int id, String suffix) {
        List list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionTopup where flag=0 and idtransacttopup = " + id, suffix);
        if (list.isEmpty()) {
            return null;
        } else {
            return ((TransactionTopup) list.get(0));
        }
    }

    public List getTransactionTopup_by_simOffer(Session session, SimOffer simOffer, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionTopup where flag=0 "
                + "and simOffer = " + simOffer.getIdsimOffer(), suffix);

    }

    public List getTransactionTopup_by_statusInfo(Session session, StatusInfo statusInfo, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionTopup where flag=0 "
                + "and statusInfo = " + statusInfo.getIdstatusInfo(), suffix);

    }

    public List getTransactionTopup_by_simClient(Session session, String simClient, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionTopup where flag=0 "
                + "and simInfo LIKE '%" + simClient + "%'", suffix);

    }

    public List getTransactionTopup_by_transactAmount(Session session, double transactAmountmin, double transactAmountmax, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionTopup where flag=0 "
                + "and (transactAmount >= " + transactAmountmin + " and transactAmount <= " + transactAmountmax + ")",
                suffix);
    }

    public List getTransactionTopup_by_realTransactAmount(Session session, double realtransactAmountmin, double realtransactAmountmax, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionTopup where flag=0 "
                + "and (realTransactAmount >= " + realtransactAmountmin + " and realTransactAmount <= " + realtransactAmountmax + ")",
                suffix);
    }

    public List getTransactionTopup_by_simOffer_statusInfo(Session session, SimOffer simOffer, StatusInfo statusInfo, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionTopup where flag=0 "
                + "and simOffer = " + simOffer.getIdsimOffer()
                + " and statusInfo = " + statusInfo.getIdstatusInfo(),
                suffix);

    }

    public List getTransactionTopup_by_simOffer_statusInfo_transactAmount(Session session, SimOffer simOffer, StatusInfo statusInfo, double transactAmountmin, double transactAmountmax, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionTopup where flag=0 "
                + "and simOffer = " + simOffer.getIdsimOffer()
                + " and statusInfo = " + statusInfo.getIdstatusInfo()
                + " and (transactAmount >= " + transactAmountmin + " and transactAmount <= " + transactAmountmax + ")",
                suffix);

    }

    public List getTransactionTopup_by_simOffer_statusInfo_realtransactAmount(Session session, SimOffer simOffer, StatusInfo statusInfo, double transactAmountmin, double transactAmountmax, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionTopup where flag=0 "
                + "and simOffer = " + simOffer.getIdsimOffer()
                + " and statusInfo = " + statusInfo.getIdstatusInfo()
                + " and (realTransactAmount >= " + transactAmountmin + " and realTransactAmount <= " + transactAmountmax + ")",
                suffix);

    }

    public List getTransactionTopup_by_simInfo_transactAmount(Session session, SimOffer simOffer, double transactAmountmin, double transactAmountmax, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionTopup where flag=0 "
                + "and simOffer = " + simOffer.getIdsimOffer()
                + " and (transactAmount >= " + transactAmountmin + " and transactAmount <= " + transactAmountmax + ")",
                suffix);

    }

    public List getTransactionTopup_by_simOffer_realtransactAmount(Session session, SimOffer simOffer, double transactAmountmin, double transactAmountmax, String suffix) {
        return hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "FROM TransactionTopup where flag=0 "
                + "and simOffer = " + simOffer.getIdsimOffer()
                + " and (realTransactAmount >= " + transactAmountmin + " and realTransactAmount <= " + transactAmountmax + ")",
                suffix);
    }

    public void addTransactionTopup(TransactionTopup adt, Session session) {
        hqlQueriesHelper.executeAddHQLQuery_WithPreparedSession(adt, session);
    }

    public void updateTransactionTopup(TransactionTopup adt, Session session) {
        hqlQueriesHelper.executeUpdateHQLQuery_WithPreparedSession(adt, session);
    }

    public List getAllTransactionTopupGroupTransactionBySatusLabel(String Status, String type, String name, String dateDebut, String dateFin, String timeDebut, String timeFin, String simType, String operator, String offer, String sim, String minSold, String maxSold) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        String dateWhere = "";
        String interavaleSold = "";
          String timed = " 00:00:00'";
        if (timeDebut != "") {
            timed = " "+timeDebut+"'";;
        }
        String timef = " 23:59:00'";
        if (timeFin != "") {
            timef = " "+timeFin+"'";;
        }
        if (dateDebut != "") {
            dateWhere = "and transact_date >=  '" + dateDebut + timed;
        }
        if (dateFin != "") {
            dateWhere += " and transact_date <= '" + dateFin + timef;
        }
        if (minSold != "") {
            interavaleSold += " and transactAmount >=" + minSold;
        }
        if (maxSold != "") {
            interavaleSold += " and transactAmount <=" + maxSold;
        }
        List list = new ArrayList();

        list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "SELECT statusInfo.statusInfoDesc  FROM TransactionTopup where  providerClient.traderByIdclient.traderFname like '%" + name + "%' and statusInfo.statusInfoDesc like '%" + Status + "%' and transactionType.transactionTypeDesc like '%" + type + "%' "
                + dateWhere + " " + interavaleSold
                + " and flag=0  and simOffer.simInfo.simnumber like'%" + sim + "%' and simOffer.simInfo.simType.simTypeDesc like'%" + simType + "%'  and simOffer.simInfo.operator.operatorDesc like'%" + operator + "%'  and simOffer.offerInfo.offerDesc like'%" + offer + "%'  group by statusInfo.statusInfoDesc", "");

        System.out.println("model_helpers.TransactionTopup_Util.getAllTransactionTopupGroupTransactionSim()" + list.size());
        return list;

    }

    public List getAllTransactionTopupGroupTransactionBySatusCount(String Status, String type, String name, String dateDebut, String dateFin, String timeDebut, String timeFin, String simType, String operator, String offer, String sim, String minSold, String maxSold) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        String dateWhere = "";
        String interavaleSold = "";
            String timed = " 00:00:00'";
        if (timeDebut != "") {
            timed = " "+timeDebut+"'";;
        }
        String timef = " 23:59:00'";
        if (timeFin != "") {
            timef = " "+timeFin+"'";;
        }
        if (dateDebut != "") {
            dateWhere = "and transact_date >=  '" + dateDebut + timed;
        }
        if (dateFin != "") {
            dateWhere += " and transact_date <= '" + dateFin + timef;
        }
        System.out.println("dateTime => "+dateWhere );
        if (minSold != "") {
            interavaleSold += " and transactAmount >=" + minSold;
        }
        if (maxSold != "") {
            interavaleSold += " and transactAmount <=" + maxSold;
        }
        List list = new ArrayList();
        list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "SELECT Count(*)   FROM TransactionTopup where  providerClient.traderByIdclient.traderFname like '%" + name + "%' and statusInfo.statusInfoDesc like '%" + Status + "%' and transactionType.transactionTypeDesc like '%" + type + "%' "
                + dateWhere + " " + interavaleSold
                + " and flag=0  and simOffer.simInfo.simnumber like'%" + sim + "%' and simOffer.simInfo.simType.simTypeDesc like'%" + simType + "%' and simOffer.simInfo.operator.operatorDesc like'%" + operator + "%'  and simOffer.offerInfo.offerDesc like'%" + offer + "%'"
                + " group by statusInfo.statusInfoDesc", "");

        return list;

    }

    public List getAllTransactionTopupGroupTransactionByOpratoreLABEL(String Status, String type, String name, String dateDebut, String dateFin, String timeDebut, String timeFin, String simType, String operator, String offer, String sim, String minSold, String maxSold) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        String dateWhere = "";
        String interavaleSold = "";
         String timed = " 00:00:00'";
        if (timeDebut != "") {
            timed = " "+timeDebut+"'";;
        }
        String timef = " 23:59:00'";
        if (timeFin != "") {
            timef = " "+timeFin+"'";;
        }
        if (dateDebut != "") {
            dateWhere = "and transact_date >=  '" + dateDebut + timed;
        }
        if (dateFin != "") {
            dateWhere += " and transact_date <= '" + dateFin + timef;
        }
        if (minSold != "") {
            interavaleSold += " and transactAmount >=" + minSold;
        }
        if (maxSold != "") {
            interavaleSold += " and transactAmount <=" + maxSold;
        }
        List list = new ArrayList();
        list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "SELECT simOffer.simInfo.operator.operatorDesc  FROM TransactionTopup where  providerClient.traderByIdclient.traderFname like '%" + name + "%' and statusInfo.statusInfoDesc like '%" + Status + "%' and transactionType.transactionTypeDesc like '%" + type + "%' "
                + dateWhere + " " + interavaleSold
                + " and flag=0  and simOffer.simInfo.simnumber like'%" + sim + "%' and simOffer.simInfo.simType.simTypeDesc like'%" + simType + "%' and simOffer.simInfo.operator.operatorDesc like'%" + operator + "%'  and simOffer.offerInfo.offerDesc like'%" + offer + "%'"
                + " group by simOffer.simInfo.operator.operatorDesc", "");
        return list;

    }

    public List getAllTransactionTopupGroupTransactionByOpratoreCount(String Status, String type, String name, String dateDebut, String dateFin, String timeDebut, String timeFin, String simType, String operator, String offer, String sim, String minSold, String maxSold) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        String dateWhere = "";
        String interavaleSold = "";
           String timed = " 00:00:00'";
        if (timeDebut != "") {
            timed = " "+timeDebut+"'";;
        }
        String timef = " 23:59:00'";
        if (timeFin != "") {
            timef = " "+timeFin+"'";;
        }
        if (dateDebut != "") {
            dateWhere = "and transact_date >=  '" + dateDebut + timed;
        }
        if (dateFin != "") {
            dateWhere += " and transact_date <= '" + dateFin + timef;
        }
        if (minSold != "") {
            interavaleSold += " and transactAmount >=" + minSold;
        }
        if (maxSold != "") {
            interavaleSold += " and transactAmount <=" + maxSold;
        }
        List list = new ArrayList();

        list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "SELECT  SUM(transactAmount)  FROM TransactionTopup where  providerClient.traderByIdclient.traderFname like '%" + name + "%' and statusInfo.statusInfoDesc like '%" + Status + "%' and transactionType.transactionTypeDesc like '%" + type + "%' "
                + dateWhere + " " + interavaleSold
                + " and flag=0  and simOffer.simInfo.simnumber like'%" + sim + "%' and simOffer.simInfo.simType.simTypeDesc like'%" + simType + "%'  and simOffer.simInfo.operator.operatorDesc like'%" + operator + "%'  and simOffer.offerInfo.offerDesc like'%" + offer + "%'"
                + " group by simOffer.simInfo.operator.operatorDesc", "");

        System.out.println("model_helpers.TransactionTopup_Util.getAllTransactionTopupGroupTransactionSim()" + list.size());
        return list;

    }

    public List getAllTransactionTopupGroupTransactionBySatusLabel(String dateDebut, String dateFin) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        String dateWhere = "";

        if (dateDebut != "") {
            dateWhere = "and transact_date >=  '" + dateDebut + " 00:00:00'";
        }
        if (dateFin != "") {
            dateWhere += " and transact_date <= '" + dateFin + " 23:59:00'";
        }
        List list = new ArrayList();

        list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "SELECT statusInfo.statusInfoDesc  FROM TransactionTopup where flag=0 " + dateWhere + " group by statusInfo.statusInfoDesc", "");

        System.out.println("model_helpers.TransactionTopup_Util.getAllTransactionTopupGroupTransactionSim()" + list.size());
        return list;

    }

    public List getAllTransactionTopupGroupTransactionBySatusCount(String dateDebut, String dateFin) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        String dateWhere = "";

        if (dateDebut != "") {
            dateWhere = "and transact_date >=  '" + dateDebut + " 00:00:00'";
        }
        if (dateFin != "") {
            dateWhere += " and transact_date <= '" + dateFin + " 23:59:00'";
        }
        List list = new ArrayList();

        list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "SELECT Count(*)   FROM TransactionTopup where flag=0 " + dateWhere + " group by statusInfo.statusInfoDesc", "");

        return list;

    }

    public List getAllTransactionTopupGroupTransactionByOpratoreLABEL(String dateDebut, String dateFin) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        String dateWhere = "";

        if (dateDebut != "") {
            dateWhere = "and transact_date >=  '" + dateDebut + " 00:00:00'";
        }
        if (dateFin != "") {
            dateWhere += " and transact_date <= '" + dateFin + " 23:59:00'";
        }
        List list = new ArrayList();

        list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "SELECT simOffer.simInfo.operator.operatorDesc   FROM TransactionTopup where flag=0 " + dateWhere + " group by simOffer.simInfo.operator.operatorDesc", "");

        System.out.println("model_helpers.TransactionTopup_Util.getAllTransactionTopupGroupTransactionSim()" + list.size());
        return list;

    }

    public List getAllTransactionTopupGroupTransactionByOpratoreCount(String dateDebut, String dateFin) {
        Session session = HibernateUtil.getSessionFactory().openSession();
        String dateWhere = "";

        if (dateDebut != "") {
            dateWhere = "and transact_date >=  '" + dateDebut + " 00:00:00'";
        }
        if (dateFin != "") {
            dateWhere += " and transact_date <= '" + dateFin + " 23:59:00'";
        }
        List list = new ArrayList();
        list = hqlQueriesHelper.ExecuteSelectHqlQuery_WithPreparedSession(session, "SELECT SUM(transactAmount)   FROM TransactionTopup where flag=0 " + dateWhere + " group by simOffer.simInfo.operator.operatorDesc", "");

        return list;

    }

}